//:[ToC](00-00_toc) | [Tips and Tricks](900-00-tips_and_tricks) | [Previous](@previous) | [Next](@next)
//: ## Definiowanie i WywoÅ‚ywanie Funkcji
//: __Funkcje__ to niezaleÅ¼ne kawaÅ‚ki reuÅ¼ywalnego kodu. __Metody__ to funkcje naleÅ¼Ä…ce do jakiegoÅ› __typu__ .

//: Funkcje deklarujemy przy uÅ¼ycia sÅ‚owa kluczowego __func__. NastÄ™pnie nadajemy jej nazwÄ™ (_konwencja_ : notacjaWielbÅ‚Ä…dzia), parametry w nawiasach okrÄ…gÅ‚ych i w klamerkach __ciaÅ‚o funkcji__ czyli kod jaki ma byÄ‡ wykonywany przy jej wywoÅ‚aniu.
func cytujCytat() {
    print("MoÅ¼na piÄ‡ bez obawieÅ„")
}

//: Funkcja przyjmujÄ…ca parametr.
func przywitaj(_ imie: String) {
    print("CzeÅ›Ä‡ \(imie), bÄ™dziesz to jeÅ›Ä‡?\n")
}

//: Funkcja przyjmujÄ…ca wiÄ™cej parametrÃ³w.
func cytuj(_ cytat: String, autor: String) {
    print("\"\(cytat)\"\n\t\t-- \(autor)\n")
}

//: Funkcje wywoÅ‚ujemy podajÄ…c jej nazwÄ™ i przekazujÄ…c w parametrach niezbÄ™dne argumenty. Co ciekawe pierwszy argument nie jest nazwany. To co widaÄ‡ przy wywoÅ‚aniu funkcji to _zewnÄ™trzna nazwa parametru_ . Nazwa parametru uÅ¼yta wewnÄ…trz to _wewnÄ™trzna nazwa parametru_ . DomyÅ›lnie zewnÄ™trzna i wewnÄ™trzna nazwa parametru jest taka sama.
//cytuj("MoÅ¼na piÄ‡ bez obawieÅ„.", autor: "WiesÅ‚aw Wszywka")

func cytujZParametrami(_ cytat: String, autorCytatu autor: String) {
    print("\"\(cytat)\"\n\t\t-- \(autor)\n")
}

//cytujZParametrami(cytat: "Badziewie do badziewia.", autorCytatu: "WiesÅ‚aw Wszywka")

//: PoniewaÅ¼ sÄ… jeszcze pewne naleciaÅ‚oÅ›ci nazewnicze z __Objective CğŸ‘‘__ to czÄ™sto pierwsza nazwa parametru znajduje siÄ™ w nazwie metody.

func cytujCytat(_ cytat: String, autorCytatu autor: String) {
    print("\"\(cytat)\"\n\t\t-- \(autor)\n")
}

//cytujCytat("Niebo w ziemi.", autorCytatu: "wiesÅ‚aw Wszywka")

//: JeÅ¼eli chcemy pozbyÄ‡ siÄ™ zewnÄ™trznych parametrÃ³w w wywoÅ‚aniu funkcji, moÅ¼emy to zrobiÄ‡ zastepujÄ…c je "_". Funkcje potrafiÄ… teÅ¼ zwracaÄ‡ wynik swojego dziaÅ‚ania. Oznacza siÄ™ to przez strzÅ‚kÄ™ __ -> __ i podanie zwracanego typu.

func dodajDwieLiczby(_ liczba1: Int, _ liczba2: Int) -> Int {
    return liczba1 + liczba2
}

var sumaLiczb = dodajDwieLiczby(40, 2)

//: Typy argumentÃ³w oraz zwracany typ tworzÄ… razem coÅ› co nazywa siÄ™ "typem funkcji".
type(of: dodajDwieLiczby)

//: MoÅ¼emy teÅ¼ stworzyÄ‡ zmiennÄ…, ktÃ³ra bÄ™dzie nam "przechowywaÄ‡" funkcje. Kluczowe jest uÅ¼ycie __samej__ nazwy funkcji.

let funkcja = dodajDwieLiczby

sumaLiczb = funkcja(60, 9)

//: MoÅ¼emy przypisaÄ‡ domyÅ›lne wartoÅ›ci dla parametrÃ³w funkcji. Lepiej jest umieszczaÄ‡ takie parametry na koÅ„cu listy. DziÄ™ki temu moÅ¼emy pominÄ…Ä‡ te parametry przy wywoÅ‚ywaniu funkcji.

func cytujDomyslneParametry(_ cytat: String, autor: String, ileRazy: Int = 1) {
    for _ in 0..<ileRazy {
        cytuj(cytat, autor: autor)
    }
}

//cytujDomyslneParametry("Kur zapiaÅ‚!", autor: "WiesÅ‚aw Wszywska")

//: Funkcje mogÄ… przyjmowaÄ‡ teÅ¼ opcjonalne argumenty. Co fajne poniewaÅ¼ w tym wypadku nadajemu mu domyÅ›lnÄ… wartoÅ›Ä‡ jako __nil__ to przy wywoÅ‚aniu moÅ¼emy pominÄ…Ä‡ ten agrument.

func cytujCytatOpcjonalnyAutor(_ cytat: String, autor: String? = nil) {
    let autorCytatu = autor ?? "Anonim"
    cytuj(cytat, autor: autorCytatu)
}

//cytujCytatOpcjonalnyAutor("Gdzie kucharek szeÅ›Ä‡ tam...")

//: A co jeÅ¼ei nie wiemy ile chcemy tych parametrÃ³w... na to mamy i takiego wariata ;) Aby okreÅ›liÄ‡, Å¼e funkcja przyjmuje zmiennÄ… iloÅ›Ä‡ argumentÃ³w za typem parametru dodajemy "...". WewnÄ…trz funkcji otrzymamy SwiftowÄ… tablicÄ™ tego typu. Trzeba przynaÄ‡, Å¼e jest to o wiele przyjemniejsza skÅ‚adnia niÅ¼ w C/ObjC.

func sumujLiczby(_ liczby:Int...) -> Int {
    type(of: liczby)

    return liczby.reduce(0, +)
}

sumujLiczby(1,2,3,4,5)

//: ## PrzeciÄ…Å¼anie Funkcji

func robiCos(_ z: String) { z }
func robiCos(_ z: Int) { z }
//robiCos.dynamicType // ğŸ’¥ biedak nie wie ktÃ³rÄ… zawoÅ‚aÄ‡

//: W tym wypadku Swift podejmuje decyzjÄ™ ktÃ³rÄ… funkcje zawoÅ‚aÄ‡ w czasie kompilacji. Sprawy majÄ… siÄ™ troszeczkÄ™ inaczej jeÅ¼eli funkcja/metoda zdefiniowana w klasie i inna klasa jÄ… przeciÄ…Å¼a, ale o tym pÃ³xniej ğŸ¤“
type(of: (robiCos as (String)->Void))
type(of: (robiCos as (Int)->Void))
//func robiCos(zCzymsInnym: Int) {} // ğŸ’¥

//: Bardzo ciekawym przypadkiem sÄ… [__operatory__](07_05_operatory) (+, -, *, / etc.) gdyÅ¼ sÄ… one przeciÄ…Å¼onymi funkcjami.

6 + 9 // klikamy z altem na "+"

//: MoÅ¼emy nawet taki operator przypisaÄ‡ do zmiennej jednak musimy podaÄ‡ konkretny "wariant przeciÄ…Å¼enia" aby kompilator wiedziaÅ‚ o ktÃ³rÄ… wersje nam chodzi.

let dodawacz: (Int, Int) -> Int = (+)
dodawacz(6,9)

//:[ToC](00-00_toc) | [Tips and Tricks](900-00-tips_and_tricks) | [Previous](@previous) | [Next](@next)
